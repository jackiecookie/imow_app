<style lang="scss" src="./styles/base.scss"></style>
<style lang="scss" src="./styles/weui.scss"></style>
<style lang="scss" src="./styles/icons.scss"></style>
<style lang="scss">
.container {
  height: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: space-between;
  box-sizing: border-box;
}
</style>

<script>
import wepy from 'wepy'
import 'wepy-async-function'

import { setStore } from 'wepy-redux'
import configStore from './store'
import auth from './api/auth'
import Tips from './utils/Tips'

const store = configStore()
setStore(store)

export default class extends wepy.app {
  config = {
    pages: [
      'pages/index',
      'pages/login',
      'pages/register',
      'pages/postType',
      'pages/post',
      'pages/search',
      'pages/member'
    ],
    window: {
      backgroundTextStyle: 'dark',
      backgroundColor: '#F5F5F5',
      navigationBarBackgroundColor: '#d81e06'
    },
    tabBar: {
      color: '#AEADAD',
      selectedColor: '#d81e06',
      backgroundColor: '#fff',
      borderStyle: 'black',
      list: [{
        pagePath: 'pages/index',
        text: '首页',
        iconPath: '/images/home.png',
        selectedIconPath: '/images/home_selected.png'
      }, {
        pagePath: 'pages/postType',
        text: '发布',
        iconPath: '/images/post.png',
        selectedIconPath: '/images/post_selected.png'
      }, {
        pagePath: 'pages/search',
        text: '查找',
        iconPath: '/images/search.png',
        selectedIconPath: '/images/search_selected.png'
      }, {
        pagePath: 'pages/member',
        text: '我的',
        iconPath: '/images/member.png',
        selectedIconPath: '/images/member_selected.png'
      }]
    },
    debug: true
  }

  globalData = {
    auth: {
      third_session: null
    },
    pageParams: {}
  }

  constructor () {
    super()
    this.use('requestfix')
    this.use('promisify')
    this.intercept('request', {
      config (p) {
        p.header = this.createAuthHeader()
        return p
      },

      success (p) {
        // 面向切面统一处理网络请求的错误
        if (p && p.data) {
          if (p.data.status === 0) {
            if (p.data.list && p.data.list.length > 0) {
              p.data = p.data.list
            }
          } else if (p.data.status === 88) {
            Tips.error((p.data.errorMag && p.data.errorMag) || '失败,请重试')
          }
        }
        return p
      },

      fail (p) {
        console.log('request fail: ', p)
        return p
      }
    })
  }

  createAuthHeader () {
    const thridSession = auth.getConfig('third_session')
    const header = {}
    if (thridSession) {
      header['third_session'] = thridSession
    }
    return header
  }

  async onLaunch(param) {
    Tips.loading()
    this.syncStoreConfig('third_session')
    await auth.login()
    Tips.loaded()
  }

  syncStoreConfig(key) {
    try {
      const value = wepy.getStorageSync(key)
      if (value !== '') {
        console.info(`[auth]${key} sync success `)
        wepy.$instance.globalData.auth[key] = value
      }
    } catch (e) {
      console.warn(`[auth]${key} sync fail `)
    }
  }
}

</script>
